<?php
/**
 * Error
 *
 * PHP version 5
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\analytics
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Seller Service Metrics API
 *
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\analytics\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\analytics\ObjectSerializer;

/**
 * Error Class Doc Comment
 *
 * @category Class
 * @description Type that defines the fields that can be returned in an error.
 * @package  macropage\SDKs\ebay\rest\analytics
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Error implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Error';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'category' => 'string',
        'domain' => 'string',
        'errorId' => 'int',
        'inputRefIds' => 'string[]',
        'longMessage' => 'string',
        'message' => 'string',
        'outputRefIds' => 'string[]',
        'parameters' => '\macropage\SDKs\ebay\rest\analytics\Model\ErrorParameter[]',
        'subdomain' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'category' => null,
        'domain' => null,
        'errorId' => 'int32',
        'inputRefIds' => null,
        'longMessage' => null,
        'message' => null,
        'outputRefIds' => null,
        'parameters' => null,
        'subdomain' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category' => 'category',
        'domain' => 'domain',
        'errorId' => 'errorId',
        'inputRefIds' => 'inputRefIds',
        'longMessage' => 'longMessage',
        'message' => 'message',
        'outputRefIds' => 'outputRefIds',
        'parameters' => 'parameters',
        'subdomain' => 'subdomain'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category' => 'setCategory',
        'domain' => 'setDomain',
        'errorId' => 'setErrorId',
        'inputRefIds' => 'setInputRefIds',
        'longMessage' => 'setLongMessage',
        'message' => 'setMessage',
        'outputRefIds' => 'setOutputRefIds',
        'parameters' => 'setParameters',
        'subdomain' => 'setSubdomain'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category' => 'getCategory',
        'domain' => 'getDomain',
        'errorId' => 'getErrorId',
        'inputRefIds' => 'getInputRefIds',
        'longMessage' => 'getLongMessage',
        'message' => 'getMessage',
        'outputRefIds' => 'getOutputRefIds',
        'parameters' => 'getParameters',
        'subdomain' => 'getSubdomain'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['errorId'] = isset($data['errorId']) ? $data['errorId'] : null;
        $this->container['inputRefIds'] = isset($data['inputRefIds']) ? $data['inputRefIds'] : null;
        $this->container['longMessage'] = isset($data['longMessage']) ? $data['longMessage'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['outputRefIds'] = isset($data['outputRefIds']) ? $data['outputRefIds'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['subdomain'] = isset($data['subdomain']) ? $data['subdomain'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Identifies whether the error was in the REQUEST or happened when running the APPLICATION.
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain The primary system where the error occurred. This is relevant for application errors. For Analytics errors, it always has the value API_ANALYTICS.
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets errorId
     *
     * @return int|null
     */
    public function getErrorId()
    {
        return $this->container['errorId'];
    }

    /**
     * Sets errorId
     *
     * @param int|null $errorId A positive integer that uniquely identifies the specific error condition that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms. Traffic report error IDs range from 50001 to 50500.
     *
     * @return $this
     */
    public function setErrorId($errorId)
    {
        $this->container['errorId'] = $errorId;

        return $this;
    }

    /**
     * Gets inputRefIds
     *
     * @return string[]|null
     */
    public function getInputRefIds()
    {
        return $this->container['inputRefIds'];
    }

    /**
     * Sets inputRefIds
     *
     * @param string[]|null $inputRefIds Identifies specific request elements associated with the error, if any. inputRefId's response is format specific. For JSON, use JSONPath notation.
     *
     * @return $this
     */
    public function setInputRefIds($inputRefIds)
    {
        $this->container['inputRefIds'] = $inputRefIds;

        return $this;
    }

    /**
     * Gets longMessage
     *
     * @return string|null
     */
    public function getLongMessage()
    {
        return $this->container['longMessage'];
    }

    /**
     * Sets longMessage
     *
     * @param string|null $longMessage A more detailed explanation of the error than given in the message error field.
     *
     * @return $this
     */
    public function setLongMessage($longMessage)
    {
        $this->container['longMessage'] = $longMessage;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message Information on how to correct the problem, in the end user's terms and language where applicable. Its value is at most 50 characters long. If applicable, the value is localized in the end user's requested locale.
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets outputRefIds
     *
     * @return string[]|null
     */
    public function getOutputRefIds()
    {
        return $this->container['outputRefIds'];
    }

    /**
     * Sets outputRefIds
     *
     * @param string[]|null $outputRefIds Identifies specific response elements associated with the error, if any. Path format is the same as inputRefId.
     *
     * @return $this
     */
    public function setOutputRefIds($outputRefIds)
    {
        $this->container['outputRefIds'] = $outputRefIds;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \macropage\SDKs\ebay\rest\analytics\Model\ErrorParameter[]|null
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \macropage\SDKs\ebay\rest\analytics\Model\ErrorParameter[]|null $parameters This optional list of name/value pairs that contain context-specific ErrorParameter objects, with each item in the list being a parameter (or input field name) that caused an error condition. Each ErrorParameter object consists of two fields, a name and a value.
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets subdomain
     *
     * @return string|null
     */
    public function getSubdomain()
    {
        return $this->container['subdomain'];
    }

    /**
     * Sets subdomain
     *
     * @param string|null $subdomain If present, indicates which subsystem in which the error occurred.
     *
     * @return $this
     */
    public function setSubdomain($subdomain)
    {
        $this->container['subdomain'] = $subdomain;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


